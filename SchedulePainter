class Course { 
    // This class is just placeholder code to test the SchedulePainter class.  It can be removed once the SchedulePainter is changed to reference the database.
    String courseId; //CSC 3380, etc
    String name;
    String instructor;
    String days; // MWF, TuTh, MTuWTh, etc
    Time startTime;
    Time endTime;
    int timeMinutes;

    Course(String aCourseId, String aName, String aInstructor, String aDay, Time aStart, Time aEnd) {
        courseId = aCourseId;
        name = aName;
        instructor = aInstructor;
        days = aDay;
        startTime = aStart;
        timeMinutes = (int) ((aEnd.getTime() - aStart.getTime()) / 60000);
    }

    String getId() {
        return courseId;
    }

    String getName() {
        return name;
    }

    String getProf() {
        return instructor;
    }

    String getDays() {
        return days;
    }

    Time getStart() {
        return startTime;
    }

    double getTime() {
        return timeMinutes;
    }

    Time getEnd() {
        return endTime;
    }
}

class SchedulePainter {

    ArrayList<Course> courses = new ArrayList<>();

    SchedulePainter(ArrayList<Course> someCourses) {
        for (int i = 0; i < someCourses.size(); i++) {
            courses.add(someCourses.get(i));
        }
    }

    SchedulePainter() {
        courses = new ArrayList<>();
    }

    void addCourse(Course aCourse) {
        courses.add(aCourse);
    }

    void printSchedule() throws IOException {
        File file = new File("C:\\Users\\caroline.birch\\Documents\\NetBeansProjects\\Scheduler\\build\\classes\\scheduler\\blank schedule.png");
        Image blank = ImageIO.read(file);
        BufferedImage bi = new BufferedImage(900, 800, BufferedImage.TYPE_INT_ARGB);
        Graphics g = bi.createGraphics();
        g.drawImage(blank, 0, 0, null);
        for (int i = 0; i < courses.size(); i++) {
            int R = (int) (Math.random() * 156 + 100);
            int G = (int) (Math.random() * 156 + 100);
            int B = (int) (Math.random() * 156 + 100);
            Color randomColor = new Color(R, G, B);
            g.setColor(randomColor);
            int y = (int) ((courses.get(i).getStart().getTime() - new Time(7, 0, 0).getTime()) / 61017) + 99;
            int height = (int) (courses.get(i).getTime() * .98333333333);
            ArrayList<Integer> x = new ArrayList<>();
            if (courses.get(i).getDays().contains("M")) {
                x.add(95);
            }
            if (courses.get(i).getDays().contains("Tu")) {
                x.add(248);
            }
            if (courses.get(i).getDays().contains("W")) {
                x.add(401);
            }
            if (courses.get(i).getDays().contains("Th")) {
                x.add(554);
            }
            if (courses.get(i).getDays().contains("F")) {
                x.add(707);
            }
            for (int j = 0; j < x.size(); j++) {
                g.fillRect(x.get(j), y, 153, height);
                g.setColor(Color.black);
                g.drawRect(x.get(j), y, 153, height);
                g.drawString(courses.get(i).getName(), x.get(j) + 10, y + 20);
                g.drawString(courses.get(i).getId(), x.get(j) + 10, y + 32);
                g.drawString(courses.get(i).getProf(), x.get(j) + 10, y + 44);
                g.setColor(randomColor);
            }
        }
        ImageIO.write(bi, "PNG", new File("new.PNG"));
    }
}
